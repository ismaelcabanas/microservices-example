group 'cabanas.garcia.ismael.microservices.core'
version '1.0.0-SNAPSHOT'

repositories {
    mavenCentral()
    maven { url "https://repo.spring.io/release" }
    maven {
        // docker-compose-rule is published on bintray
        url 'https://dl.bintray.com/palantir/releases'
    }
}

buildscript {
    ext {
        springBootVersion = '1.4.5.RELEASE'
        springCloudBomVersion = 'Camden.SR6'
    }
    repositories {
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath group: "org.springframework.boot", name: "spring-boot-gradle-plugin", version: springBootVersion
        classpath group: "gradle.plugin.com.gorylenko.gradle-git-properties", name: "gradle-git-properties", version: "1.4.16"
        classpath group: "org.unbroken-dome.gradle-plugins", name: "gradle-testsets-plugin", version: "1.2.0"
    }
}

apply plugin: 'java'
apply plugin: 'eclipse'
apply plugin: 'idea'
apply plugin: 'org.springframework.boot'
apply plugin: 'org.unbroken-dome.test-sets'

//apply from: 'build-application.gradle'
//apply from: 'build-git.gradle'
//apply from: 'build-static-code-analysis.gradle'

targetCompatibility = 1.8

testSets {
    integrationTest {dirName = 'integration-test'}
}

// para indicar que la tarea integrationTest se ejecuta antes de la tarea check y que ésta fallará si la tarea integrationTest falla
check.dependsOn integrationTest

// para indicar que la tarea de integrationTest se debe ejecutar después de la tarea test
integrationTest.mustRunAfter test

// para indicar que los reports de unit e integration-test vayan a diferentes directorios
tasks.withType(Test) {
    reports.html.destination = file("${reporting.baseDir}/${name}")
}



dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-starter-parent:${springCloudBomVersion}"
    }
}

dependencies {
    // Spring dependencies
    compile("org.springframework.boot:spring-boot-starter-web")
    compile("org.springframework.cloud:spring-cloud-starter-eureka")

    // Logging
    compile("ch.qos.logback:logback-classic:1.1.11")
    compile("net.rakugakibox.springbootext:spring-boot-ext-logback-access:1.2")

    // Api docs
    compile("io.springfox:springfox-swagger2:2.6.1")

    // Spring monitoring and tooling to inspect things at runtime
    compile("org.springframework.boot:spring-boot-starter-actuator")

    // Jackson Java time support
    compile("com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.7.4")

    // JDBC
    compile("org.springframework:spring-jdbc")
    compile('org.postgresql:postgresql:9.4.+')
    compile('com.zaxxer:HikariCP:2.4.3')
    compile("org.flywaydb:flyway-core:4.0.3")

    // Kafka
    compile 'org.apache.kafka:kafka-clients:0.8.2.2'
    compile 'org.apache.kafka:kafka_2.11:0.8.2.2'

    // Standard set of test tooling
    testCompile('org.springframework.boot:spring-boot-starter-test')
    testCompile('com.palantir.docker.compose:docker-compose-rule:0.28.1')

    integrationTestCompile(
            //Add dependencies that are required to compile
            //our integration tests.
            'org.dbunit:dbunit:2.5.3',
            'com.github.springtestdbunit:spring-test-dbunit:1.3.0',
            'org.flywaydb.flyway-test-extensions:flyway-dbunit-test:4.0',
            'org.apache.curator:curator-test:2.8.0'
    )
    integrationTestRuntime(
            //Add dependencies that are required to run
            //our integration tests.
    )
}

test {
    useJUnit {
        includeCategories 'cabanas.garcia.ismael.msproduct.UnitTests'
    }
    testLogging {
        showStandardStreams = true
    }
}

// 1. indicamos que los tests de integración deben usar Junit porque vamos a hacer cambios en su configuración
// 2. configuramos JUnit para que ejecute únicamente aquellos tests que estén categorizados con IntegrationTests
// 3. aseguramos que Gradle muestra la información por consola de nuestros tests de integración
integrationTest {
    useJUnit {
        includeCategories 'cabanas.garcia.ismael.msproduct.IntegrationTests'
    }
    testLogging {
        showStandardStreams = true
    }
}
integrationTest.doFirst {
    systemProperty "spring.profiles.active", "dev"
}

bootRun.doFirst {
    systemProperty "spring.profiles.active", "dev"
}

